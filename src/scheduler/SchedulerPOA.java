package scheduler;


/**
* scheduler/SchedulerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from treatment_scheduler.idl
* Friday, March 23, 2018 7:22:16 PM CET
*/

public abstract class SchedulerPOA extends org.omg.PortableServer.Servant
 implements scheduler.SchedulerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("get", new java.lang.Integer (0));
    _methods.put ("post", new java.lang.Integer (1));
    _methods.put ("del", new java.lang.Integer (2));
    _methods.put ("check_req", new java.lang.Integer (3));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // scheduler/Scheduler/get
       {
         short index = in.read_short ();
         scheduler.Request $result = null;
         $result = this.get (index);
         out = $rh.createReply();
         scheduler.RequestHelper.write (out, $result);
         break;
       }

       case 1:  // scheduler/Scheduler/post
       {
         scheduler.Request req = scheduler.RequestHelper.read (in);
         boolean $result = false;
         $result = this.post (req);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 2:  // scheduler/Scheduler/del
       {
         short index = in.read_short ();
         this.del (index);
         out = $rh.createReply();
         break;
       }

       case 3:  // scheduler/Scheduler/check_req
       {
         try {
           scheduler.Request req = scheduler.RequestHelper.read (in);
           boolean $result = false;
           $result = this.check_req (req);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (scheduler.invalid_req $ex) {
           out = $rh.createExceptionReply ();
           scheduler.invalid_reqHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:scheduler/Scheduler:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Scheduler _this() 
  {
    return SchedulerHelper.narrow(
    super._this_object());
  }

  public Scheduler _this(org.omg.CORBA.ORB orb) 
  {
    return SchedulerHelper.narrow(
    super._this_object(orb));
  }


} // class SchedulerPOA
